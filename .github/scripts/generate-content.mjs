// .github/scripts/generate-content.mjs
import Anthropic from '@anthropic-ai/sdk';
import fs from 'fs-extra';
import path from 'path';
import matter from 'gray-matter';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

async function getCurrentTechTrends() {
  // T√≥picos pr√©-definidos de tecnologia
  const techTopics = [
    'Intelig√™ncia Artificial e Machine Learning',
    'Testes Automatizados',
    'React e JavaScript',
    'Patterns de Design',
    'Inova√ß√µes em IA',
    'Claude Code e AI Assistants',
    'AI Coders: Copilot, ChatGPT, Claude Code, Amazon Q',
    'Desenvolvimento Web e Frameworks',
    'DevOps e Cloud Computing',
    'Big Data e Analytics',
    'Automa√ß√£o de Desenvolvimento de Software',
    'Microservi√ßos e Arquitetura',
    'Seguran√ßa em Desenvolvimento',
    'Performance Web e Otimiza√ß√£o',
    'TypeScript e JavaScript Moderno'
  ];

  try {
    // Exemplo: integra√ß√£o com Hacker News API
    const response = await fetch('https://hacker-news.firebaseio.com/v0/topstories.json').then(res => res.json());
    const topStoryIds = response.slice(0, 10);
    const topStories = await Promise.all(topStoryIds.map(async id => {
      const story = await fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`).then(res => res.json());
      return story.title;
    }));

    // Filtrar apenas t√≠tulos v√°lidos (sem HTML, sem caracteres especiais demais)
    const validStories = topStories.filter(title => 
      title && 
      typeof title === 'string' && 
      !title.includes('<') && 
      !title.includes('>') &&
      title.length > 10 &&
      title.length < 100
    );

    console.log('T√≠tulos v√°lidos do Hacker News:', validStories);
    
    // Adicionar t√≠tulos v√°lidos aos t√≥picos
    if (validStories.length > 0) {
      techTopics.push(...validStories.slice(0, 5)); // M√°ximo 5 t√≠tulos do HN
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Erro ao buscar t√≥picos do Hacker News, usando t√≥picos pr√©-definidos:', error.message);
  }

  // Se tiver um t√≥pico customizado, usar ele
  if (process.env.CUSTOM_TOPIC && process.env.CUSTOM_TOPIC.trim()) {
    console.log('üéØ Usando t√≥pico customizado:', process.env.CUSTOM_TOPIC);
    return process.env.CUSTOM_TOPIC.trim();
  }

  // Retornar um t√≥pico aleat√≥rio da lista
  const selectedTopic = techTopics[Math.floor(Math.random() * techTopics.length)];
  return selectedTopic;
}

async function generateBaseBlogPost(topic) {
  const customTopic = process.env.CUSTOM_TOPIC;
  const contentType = process.env.CONTENT_TYPE || 'tech-article';
  const finalTopic = customTopic || topic;

  const contentTypePrompts = {
    'tech-article': `Como um especialista em tecnologia e redator de blog, crie um artigo completo sobre "${finalTopic}".

O artigo deve conter:
1. Um t√≠tulo atrativo e otimizado para SEO
2. Uma introdu√ß√£o que contextualize o tema
3. Pelo menos 3 se√ß√µes principais com subt√≠tulos
4. Informa√ß√µes t√©cnicas precisas mas acess√≠veis
5. Exemplos pr√°ticos ou casos de uso
6. Uma conclus√£o que resuma os pontos principais
7. 3-5 tags relevantes para categoriza√ß√£o`,

    'tutorial': `Como um instrutor experiente, crie um tutorial passo-a-passo sobre "${finalTopic}".

O tutorial deve conter:
1. Um t√≠tulo claro indicando que √© um tutorial
2. Pr√©-requisitos necess√°rios
3. Lista dos materiais/ferramentas necess√°rias
4. Passos numerados e detalhados
5. Exemplos de c√≥digo ou comandos quando aplic√°vel
6. Poss√≠veis problemas e solu√ß√µes
7. Pr√≥ximos passos ou recursos adicionais`,

    'review': `Como um analista de tecnologia, crie uma an√°lise/review completa sobre "${finalTopic}".

A review deve conter:
1. Um t√≠tulo que indique ser uma an√°lise
2. Vis√£o geral do t√≥pico analisado
3. Pr√≥s e contras detalhados
4. Compara√ß√£o com alternativas (se aplic√°vel)
5. Casos de uso recomendados
6. Conclus√£o com recomenda√ß√£o final
7. Rating ou pontua√ß√£o quando apropriado`,

    'news-analysis': `Como um jornalista de tecnologia, crie uma an√°lise sobre as novidades relacionadas a "${finalTopic}".

A an√°lise deve conter:
1. T√≠tulo chamativo sobre as novidades
2. Resumo das principais novidades
3. Impacto na ind√∫stria ou comunidade
4. Opini√£o de especialistas ou dados de mercado
5. Implica√ß√µes futuras
6. Conclus√£o sobre a import√¢ncia dessas novidades`
  };

  const prompt = `${contentTypePrompts[contentType] || contentTypePrompts['tech-article']}

Formato de resposta em Markdown com front matter:
---
title: "T√≠tulo do Artigo"
date: "YYYY-MM-DD"
author: "Tech Blog Bot"
tags: ["tag1", "tag2", "tag3"]
excerpt: "Breve descri√ß√£o do artigo"
---

# T√≠tulo do Artigo

Conte√∫do do artigo em markdown...

O artigo deve ter entre 800-1200 palavras e ser informativo, atual e envolvente.

Escreva em portugu√™s brasileiro.

Incluir fontes de pesquisa e links relevantes no final do artigo.
`;

  const response = await anthropic.messages.create({
    model: 'claude-sonnet-4-20250514',
    max_tokens: 5000,
    messages: [{ role: 'user', content: prompt, }]
  });

  console.log(`‚úÖ Artigo base gerado com sucesso.`);
  return response.content[0].text;
}

async function translateBlogPost(baseContent, targetLanguage) {
  if (targetLanguage === 'pt') {
    return baseContent; // J√° est√° em portugu√™s
  }

  const prompt = `
Traduza o seguinte artigo de blog de portugu√™s para ingl√™s, mantendo EXATAMENTE a mesma estrutura, formata√ß√£o markdown e front matter.

IMPORTANTE:
- Mantenha o mesmo formato de front matter
- Traduza title, tags e excerpt
- Mantenha author e date inalterados
- Traduza todo o conte√∫do markdown mantendo a formata√ß√£o
- Mantenha os links e refer√™ncias originais
- Traduza os t√≠tulos das se√ß√µes mantendo a hierarquia (# ## ###)

Artigo original em portugu√™s:

${baseContent}

Responda APENAS com o artigo traduzido completo, sem explica√ß√µes adicionais.
`;

  const response = await anthropic.messages.create({
    model: 'claude-sonnet-4-20250514',
    max_tokens: 5000,
    messages: [{ role: 'user', content: prompt, }]
  });

  console.log(`‚úÖ Artigo traduzido com sucesso para ${targetLanguage}.`);
  return response.content[0].text;
}

function generateSlugFromTopic(topic) {
  return topic
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Remove acentos
    .replace(/[^a-z0-9\s-]/g, '') // Remove caracteres especiais
    .replace(/\s+/g, '-') // Substitui espa√ßos por h√≠fens
    .replace(/-+/g, '-') // Remove h√≠fens duplos
    .trim();
}

async function savePost(content, language = 'pt', baseSlug = null) {
  // Extrair front matter e conte√∫do
  const parsed = matter(content);
  const { data, content: postContent } = parsed;

  // Gerar nome do arquivo baseado na data e slug base (se fornecido)
  const date = new Date().toISOString().split('T')[0];
  const slug = baseSlug || data.title
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Remove acentos
    .replace(/[^a-z0-9\s-]/g, '') // Remove caracteres especiais
    .replace(/\s+/g, '-') // Substitui espa√ßos por h√≠fens
    .replace(/-+/g, '-') // Remove h√≠fens duplos
    .trim();

  const filename = `${date}-${slug}.md`;

  // Atualizar data no front matter
  data.date = date;

  // Recriar o arquivo com front matter atualizado
  const finalContent = matter.stringify(postContent, data);

  // Criar diret√≥rio se n√£o existir
  const postsDir = path.join(process.cwd(), 'src', 'contents', language);
  await fs.ensureDir(postsDir);

  // Salvar o arquivo
  const filePath = path.join(postsDir, filename);
  await fs.writeFile(filePath, finalContent, 'utf8');

  console.log(`‚úÖ Post gerado com sucesso: ${filename}`);
  console.log(`üìç Localiza√ß√£o: ${filePath}`);

  return { filename, filePath, data, slug };
}


async function main() {
  try {
    console.log('üöÄ Iniciando gera√ß√£o de conte√∫do...');
    console.log(`üìã Par√¢metros recebidos:`);
    console.log(`   - CUSTOM_TOPIC: "${process.env.CUSTOM_TOPIC || 'n√£o definido'}"`);
    console.log(`   - CONTENT_TYPE: "${process.env.CONTENT_TYPE || 'n√£o definido'}"`);
    
    const langs = ['pt', 'en'];

    // Obter t√≥pico trending
    const topic = await getCurrentTechTrends();
    console.log(`üìù T√≥pico selecionado: ${topic}`);

    // Verificar se o t√≥pico √© v√°lido
    if (!topic || topic.includes('<') || topic.includes('>')) {
      throw new Error(`‚ùå T√≥pico inv√°lido detectado: "${topic}". Cont√©m HTML ou est√° vazio.`);
    }

    // Gerar slug base do t√≥pico para manter consist√™ncia
    const baseSlug = generateSlugFromTopic(topic);
    console.log(`üìå Slug base: ${baseSlug}`);

    // 1. Gerar artigo base em portugu√™s
    console.log('üìù Gerando artigo base em portugu√™s...');
    const baseContent = await generateBaseBlogPost(topic);

    let savedPosts = [];

    // 2. Para cada idioma, traduzir e salvar
    for (const lang of langs) {
      console.log(`üìù Processando artigo para ${lang}...`);

      // Traduzir se necess√°rio
      const content = await translateBlogPost(baseContent, lang);

      // Salvar post usando o mesmo slug base
      const postInfo = await savePost(content, lang, baseSlug);
      savedPosts.push(postInfo);
      console.log(`üîó Post salvo: ${postInfo.filename}`);
    }

    console.log('‚ú® Processo conclu√≠do com sucesso!');
    console.log('üìë Artigos gerados:');
    savedPosts.forEach(post => {
      console.log(`  - ${post.filename} (${post.data.title})`);
    });

  } catch (error) {
    console.error('‚ùå Erro durante a execu√ß√£o:', error);
    process.exit(1);
  }
}

main();